package routes

import (
	"fmt"
	"os"

	// jwtware "github.com/gofiber/contrib/jwt" // No longer needed directly here
	"github.com/gofiber/fiber/v2"
	"github.com/kxrxh/social-rating-system/internal/api/handlers"
	"github.com/kxrxh/social-rating-system/internal/api/middleware"
)

// getJWTSecret retrieves the JWT secret from environment variables
func getJWTSecret() ([]byte, error) {
	secret := os.Getenv("JWT_SECRET")
	if secret == "" {
		return nil, fmt.Errorf("JWT_SECRET environment variable is not set")
	}
	return []byte(secret), nil
}

// RegisterRoutes sets up all the application routes using the Dependencies struct.
func RegisterRoutes(app *fiber.App, deps *handlers.Dependencies) error {
	// Get JWT secret from environment
	jwtSecret, err := getJWTSecret()
	if err != nil {
		return fmt.Errorf("failed to initialize routes: %v", err)
	}

	// Apply global middleware
	app.Use(middleware.ResponseFormatter())

	// Public routes
	app.Get("/health", handlers.HealthHandler(deps.Repos))

	// Auth routes (Login, Register)
	RegisterAuthRoutes(app, deps)

	// TODO: Add routes that use flinkClient here, e.g.:
	// flinkGroup := app.Group("/flink")
	// flinkGroup.Get("/jobs", handlers.GetFlinkJobsHandler(deps.FlinkClient))

	// --- Apply JWT Middleware ---
	// All routes defined after this middleware will be protected
	app.Use(middleware.NewJWTMiddleware(jwtSecret))

	// --- Protected Routes ---
	app.Get("/items", handlers.GetItemsHandler(deps))

	// --- Citizen Routes (Protected) ---
	// Access: User (own data), Admin (all data)
	// citizenGroup := app.Group("/citizens")
	// citizenGroup.Get("/", handlers.ListCitizensHandler(deps))             // GET /citizens?page=1&limit=20&filter=... [Admin]
	// citizenGroup.Post("/", handlers.CreateCitizenHandler(deps))            // POST /citizens [Admin]
	// citizenGroup.Get("/:citizen_id", handlers.GetCitizenHandler(deps))      // GET /citizens/{citizen_id} [User (own), Admin]
	// citizenGroup.Put("/:citizen_id", handlers.UpdateCitizenHandler(deps))    // PUT /citizens/{citizen_id} [User (own, limited?), Admin]
	// citizenGroup.Delete("/:citizen_id", handlers.DeleteCitizenHandler(deps)) // DELETE /citizens/{citizen_id} [Admin]
	// citizenGroup.Get("/:citizen_id/score", handlers.GetCitizenScoreHandler(deps)) // GET /citizens/{citizen_id}/score (current score snapshot) [User (own), Admin]
	// citizenGroup.Get("/:citizen_id/score/history", handlers.GetCitizenScoreHistoryHandler(deps)) // GET /citizens/{citizen_id}/score/history (detailed history) [User (own), Admin]
	// citizenGroup.Get("/:citizen_id/connections", handlers.GetCitizenConnectionsHandler(deps)) // GET /citizens/{citizen_id}/connections (social graph) [User (own), Admin]
	// TODO: Add routes for managing connections if needed (POST, DELETE) [Admin? System?]

	// --- Scoring Rule Routes (Protected) ---
	// Access: Admin (CRUD), System (Flink reads rules, likely directly from DB, not via API)
	// ruleGroup := app.Group("/rules")
	// ruleGroup.Get("/", handlers.ListRulesHandler(deps))       // GET /rules [Admin]
	// ruleGroup.Post("/", handlers.CreateRuleHandler(deps))      // POST /rules [Admin]
	// ruleGroup.Get("/:rule_id", handlers.GetRuleHandler(deps))  // GET /rules/{rule_id} [Admin]
	// ruleGroup.Put("/:rule_id", handlers.UpdateRuleHandler(deps)) // PUT /rules/{rule_id} [Admin]
	// ruleGroup.Delete("/:rule_id", handlers.DeleteRuleHandler(deps)) // DELETE /rules/{rule_id} [Admin]

	// --- Rule Configuration Routes (Protected) ---
	// Access: Admin (CRUD), System (Flink reads configs, likely directly from DB, not via API)
	// configGroup := app.Group("/configurations")
	// configGroup.Get("/", handlers.ListConfigurationsHandler(deps))             // GET /configurations [Admin]
	// configGroup.Post("/", handlers.CreateConfigurationHandler(deps))            // POST /configurations [Admin]
	// configGroup.Get("/:config_id", handlers.GetConfigurationHandler(deps))      // GET /configurations/{config_id} [Admin]
	// configGroup.Put("/:config_id", handlers.UpdateConfigurationHandler(deps))    // PUT /configurations/{config_id} [Admin]
	// configGroup.Delete("/:config_id", handlers.DeleteConfigurationHandler(deps)) // DELETE /configurations/{config_id} [Admin]

	// --- Event Routes (Protected) ---
	// Access: User (own events), Admin (all events)
	// System generates events into Redpanda, Flink processes them. API is for READING history.
	// eventGroup := app.Group("/events")
	// eventGroup.Get("/", handlers.ListEventsHandler(deps)) // GET /events?citizen_id=...&type=... [User (own, filtered), Admin]
	// Maybe POST /events for manual submission [Admin? User? System?]

	// --- Analytics Routes (Protected) ---
	// Access: User (dashboards), Admin (dashboards, reports)
	// Data generated by Flink/ClickHouse, API provides access.
	// analyticsGroup := app.Group("/analytics")
	// analyticsGroup.Get("/regions", handlers.GetRegionAnalyticsHandler(deps)) // GET /analytics/regions [User, Admin]
	// analyticsGroup.Get("/trends", handlers.GetScoreTrendsHandler(deps))    // GET /analytics/trends [User, Admin]
	// analyticsGroup.Get("/activity", handlers.GetActivityMetricsHandler(deps)) // GET /analytics/activity [User, Admin]
	// analyticsGroup.Get("/graph", handlers.GetGraphMetricsHandler(deps))     // GET /analytics/graph [User, Admin]

	// --- Admin Routes (Protected) ---
	// Access: Admin Only
	// adminGroup := app.Group("/admin")
	// adminGroup.Get("/health/components", handlers.GetComponentHealthHandler(deps)) // Check health of DBs, Flink, Redpanda etc. [Admin]

	return nil
}
