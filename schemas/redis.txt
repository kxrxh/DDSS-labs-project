# Redis Schema for Social Credit System Caching and Real-time Operations

# Strings for simple values
SET citizen:001:score 850
SET citizen:002:score 625
SET citizen:003:score 310

# Set TTL (expiration) for cache values
EXPIRE citizen:001:score 3600  # Expires in 1 hour

# Hashes for structured data
HSET citizen:001:profile name "John Doe" age 35 occupation "Engineer" status "active"
HSET citizen:002:profile name "Jane Smith" age 28 occupation "Teacher" status "probation"
HSET citizen:003:profile name "Alex Johnson" age 42 occupation "Doctor" status "suspended"

# Lists for time-series or sequential data
LPUSH citizen:001:recent_activities "Tax payment" "Community service" "Traffic violation"
LPUSH citizen:002:recent_activities "Late loan payment" "Volunteer work" "Recycling participation"

# Sorted sets for rankings with scores
ZADD global_ranking 850 citizen:001
ZADD global_ranking 625 citizen:002
ZADD global_ranking 310 citizen:003

# Leaderboards by region
ZADD region:north:ranking 850 citizen:001
ZADD region:south:ranking 625 citizen:002
ZADD region:east:ranking 310 citizen:003

# Sets for group memberships
SADD blacklist citizen:003
SADD whitelist citizen:001
SADD watchlist citizen:002 citizen:005

# HyperLogLog for unique visitor counting
PFADD system:daily_active_users citizen:001 citizen:002 citizen:003

# Geo spatial data for location tracking
GEOADD citizen:locations 13.361389 38.115556 citizen:001
GEOADD citizen:locations 15.087269 37.502669 citizen:002

# Pub/Sub channels for real-time notifications
# PUBLISH citizen:001:notifications "Score increased: +10 points"
# SUBSCRIBE citizen:001:notifications

# Bitmap for boolean flags
SETBIT citizen:001:privileges:international_travel 0 1  # Allowed
SETBIT citizen:002:privileges:international_travel 0 1  # Allowed
SETBIT citizen:003:privileges:international_travel 0 0  # Not allowed

# Stream for event tracking
XADD citizen:001:events * type score_change amount +5 reason "On-time tax payment"
XADD citizen:001:events * type location_check location "Government building" result "access_granted"
XADD citizen:002:events * type score_change amount -10 reason "Late payment on loan"

# Redis Rate limiting pattern
INCR rate_limit:api:citizen:001:minute
EXPIRE rate_limit:api:citizen:001:minute 60

# Transaction caching
HSET transaction:T12345 citizen_id citizen:001 rule_id rule:tax_payment points 5 timestamp 1652197425

# Real-time analytics
HINCRBY analytics:daily:score_changes positive 15
HINCRBY analytics:daily:score_changes negative 8

# Citizen activity heatmap
HINCRBY activity:heatmap:2023-05-10 hour:9 5
HINCRBY activity:heatmap:2023-05-10 hour:10 12
HINCRBY activity:heatmap:2023-05-10 hour:11 8

# LUA Script (as a comment) for atomic operations
# -- Update score and check tier changes in one atomic operation
# local citizenId = KEYS[1]
# local scoreChange = tonumber(ARGV[1])
# local currentScore = tonumber(redis.call('GET', citizenId .. ':score'))
# local newScore = currentScore + scoreChange
# redis.call('SET', citizenId .. ':score', newScore)
# 
# -- Check for tier changes
# local oldTier = ''
# local newTier = ''
# if currentScore >= 800 then oldTier = 'A+' 
# elseif currentScore >= 700 then oldTier = 'A'
# elseif currentScore >= 600 then oldTier = 'B'
# elseif currentScore >= 500 then oldTier = 'C'
# elseif currentScore >= 400 then oldTier = 'D'
# else oldTier = 'F' end
# 
# if newScore >= 800 then newTier = 'A+' 
# elseif newScore >= 700 then newTier = 'A'
# elseif newScore >= 600 then newTier = 'B'
# elseif newScore >= 500 then newTier = 'C'
# elseif newScore >= 400 then newTier = 'D'
# else newTier = 'F' end
# 
# if oldTier ~= newTier then
#   redis.call('PUBLISH', citizenId .. ':notifications', 'Tier changed from ' .. oldTier .. ' to ' .. newTier)
# end
# 
# return newScore 